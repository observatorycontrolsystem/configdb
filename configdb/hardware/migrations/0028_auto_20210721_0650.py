# Generated by Django 3.0.6 on 2021-07-21 06:50

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('hardware', '0027_remove_instrumenttype_configuration_types'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='configurationtypeproperties',
            options={'verbose_name_plural': 'Configuration type properties'},
        ),
        migrations.AlterModelOptions(
            name='instrumentcategory',
            options={'verbose_name_plural': 'Instrument categories'},
        ),
        migrations.AddField(
            model_name='camera',
            name='orientation',
            field=models.FloatField(default=0.0, help_text='The orientation of the Cameras ccd in degrees measured counterclockwise from North (y-axis)'),
        ),
        migrations.AlterField(
            model_name='camera',
            name='camera_type',
            field=models.ForeignKey(help_text='Camera type', on_delete=django.db.models.deletion.CASCADE, to='hardware.CameraType'),
        ),
        migrations.AlterField(
            model_name='camera',
            name='code',
            field=models.CharField(help_text='Camera code', max_length=200),
        ),
        migrations.AlterField(
            model_name='camera',
            name='optical_element_groups',
            field=models.ManyToManyField(blank=True, help_text='Optical element groups that this camera contains', to='hardware.OpticalElementGroup'),
        ),
        migrations.AlterField(
            model_name='cameratype',
            name='code',
            field=models.CharField(help_text='Camera type code', max_length=200),
        ),
        migrations.AlterField(
            model_name='cameratype',
            name='max_rois',
            field=models.IntegerField(default=0, help_text='Maximum regions of interest that this camera type supports'),
        ),
        migrations.AlterField(
            model_name='cameratype',
            name='name',
            field=models.CharField(help_text='Camera type name', max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name='cameratype',
            name='pixels_x',
            field=models.IntegerField(default=0, help_text='Number of pixels on x-axis'),
        ),
        migrations.AlterField(
            model_name='cameratype',
            name='pixels_y',
            field=models.IntegerField(default=0, help_text='Number of pixels on y-axis'),
        ),
        migrations.AlterField(
            model_name='cameratype',
            name='pscale',
            field=models.FloatField(help_text='Pixel scale in arcseconds/pixel'),
        ),
        migrations.AlterField(
            model_name='cameratype',
            name='size',
            field=models.CharField(help_text='Field of view in arcminutes', max_length=200),
        ),
        migrations.AlterField(
            model_name='configurationtype',
            name='code',
            field=models.CharField(help_text='Configuration type code', max_length=64, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='configurationtype',
            name='name',
            field=models.CharField(help_text='Configuration type name', max_length=200),
        ),
        migrations.AlterField(
            model_name='configurationtypeproperties',
            name='configuration_type',
            field=models.ForeignKey(help_text='Configuration type', on_delete=django.db.models.deletion.CASCADE, to='hardware.ConfigurationType'),
        ),
        migrations.AlterField(
            model_name='configurationtypeproperties',
            name='instrument_type',
            field=models.ForeignKey(help_text='Instrument type', on_delete=django.db.models.deletion.CASCADE, to='hardware.InstrumentType'),
        ),
        migrations.AlterField(
            model_name='enclosure',
            name='active',
            field=models.BooleanField(default=True, help_text='Whether the enclosure is active and able to accept observations'),
        ),
        migrations.AlterField(
            model_name='enclosure',
            name='code',
            field=models.CharField(help_text='Enclosure code', max_length=200),
        ),
        migrations.AlterField(
            model_name='enclosure',
            name='name',
            field=models.CharField(blank=True, default='', help_text='Enclosure name', max_length=200),
        ),
        migrations.AlterField(
            model_name='enclosure',
            name='site',
            field=models.ForeignKey(help_text='Site where this enclosure is located', on_delete=django.db.models.deletion.CASCADE, to='hardware.Site'),
        ),
        migrations.AlterField(
            model_name='genericmode',
            name='code',
            field=models.CharField(help_text='Generic mode code', max_length=200),
        ),
        migrations.AlterField(
            model_name='genericmode',
            name='name',
            field=models.CharField(help_text='Generic mode name', max_length=200),
        ),
        migrations.AlterField(
            model_name='genericmodegroup',
            name='default',
            field=models.ForeignKey(blank=True, help_text='Default mode within this generic mode group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='default', to='hardware.GenericMode'),
        ),
        migrations.AlterField(
            model_name='genericmodegroup',
            name='instrument_type',
            field=models.ForeignKey(help_text='Instrument type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mode_types', to='hardware.InstrumentType'),
        ),
        migrations.AlterField(
            model_name='genericmodegroup',
            name='modes',
            field=models.ManyToManyField(help_text='Modes within this generic mode group', to='hardware.GenericMode'),
        ),
        migrations.AlterField(
            model_name='genericmodegroup',
            name='type',
            field=models.ForeignKey(help_text='Generic mode group type', null=True, on_delete=django.db.models.deletion.PROTECT, to='hardware.ModeType'),
        ),
        migrations.AlterField(
            model_name='instrument',
            name='autoguider_camera',
            field=models.ForeignKey(help_text='Autoguider camera for this instrument', on_delete=django.db.models.deletion.CASCADE, related_name='autoguides_for', to='hardware.Camera'),
        ),
        migrations.AlterField(
            model_name='instrument',
            name='autoguider_type',
            field=models.CharField(choices=[('InCamera', 'InCamera'), ('OffAxis', 'OffAxis'), ('SelfGuide', 'SelfGuide')], default='OffAxis', help_text='Type of autoguider used on this instrument', max_length=200),
        ),
        migrations.AlterField(
            model_name='instrument',
            name='code',
            field=models.CharField(blank=True, default='', help_text='Instrument code', max_length=200),
        ),
        migrations.AlterField(
            model_name='instrument',
            name='instrument_type',
            field=models.ForeignKey(help_text='Instrument type', null=True, on_delete=django.db.models.deletion.CASCADE, to='hardware.InstrumentType'),
        ),
        migrations.AlterField(
            model_name='instrument',
            name='science_cameras',
            field=models.ManyToManyField(help_text='Science cameras that belong to this instrument', to='hardware.Camera'),
        ),
        migrations.AlterField(
            model_name='instrument',
            name='telescope',
            field=models.ForeignKey(help_text='Telescope this instrument belongs to', on_delete=django.db.models.deletion.CASCADE, to='hardware.Telescope'),
        ),
        migrations.AlterField(
            model_name='instrumentcategory',
            name='code',
            field=models.CharField(help_text='Instrument category code', max_length=64, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='instrumenttype',
            name='allow_self_guiding',
            field=models.BooleanField(blank=True, default=True, help_text='Whether to allow instruments of this type to be used for self-guiding'),
        ),
        migrations.AlterField(
            model_name='instrumenttype',
            name='code',
            field=models.CharField(help_text='Instrument type code', max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name='instrumenttype',
            name='name',
            field=models.CharField(help_text='Instrument type name', max_length=200),
        ),
        migrations.AlterField(
            model_name='modetype',
            name='id',
            field=models.CharField(help_text='Mode type', max_length=200, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='opticalelement',
            name='code',
            field=models.CharField(help_text='Optical element code', max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name='opticalelement',
            name='name',
            field=models.CharField(help_text='Optical element name', max_length=200),
        ),
        migrations.AlterField(
            model_name='opticalelementgroup',
            name='default',
            field=models.ForeignKey(blank=True, help_text='Default optical element within this optical element group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='default', to='hardware.OpticalElement'),
        ),
        migrations.AlterField(
            model_name='opticalelementgroup',
            name='element_change_overhead',
            field=models.FloatField(default=0, help_text='Overhead in seconds when changing between optical elements within this optical element group'),
        ),
        migrations.AlterField(
            model_name='opticalelementgroup',
            name='name',
            field=models.CharField(help_text='Optical element group name', max_length=200),
        ),
        migrations.AlterField(
            model_name='opticalelementgroup',
            name='optical_elements',
            field=models.ManyToManyField(help_text='Optical elements belonging to this optical element group', to='hardware.OpticalElement'),
        ),
        migrations.AlterField(
            model_name='opticalelementgroup',
            name='type',
            field=models.CharField(help_text='Optical element group type', max_length=200),
        ),
        migrations.AlterField(
            model_name='site',
            name='active',
            field=models.BooleanField(default=True, help_text='Whether the site is active and able to accept observations'),
        ),
        migrations.AlterField(
            model_name='site',
            name='code',
            field=models.CharField(help_text='3-letter site code', max_length=3),
        ),
        migrations.AlterField(
            model_name='site',
            name='elevation',
            field=models.IntegerField(help_text='Site elevation in meters', validators=[django.core.validators.MinValueValidator(-500), django.core.validators.MaxValueValidator(100000)]),
        ),
        migrations.AlterField(
            model_name='site',
            name='lat',
            field=models.FloatField(default=0.0, help_text='Site latitude in decimal degrees'),
        ),
        migrations.AlterField(
            model_name='site',
            name='long',
            field=models.FloatField(default=0.0, help_text='Site longitude in decimal degrees'),
        ),
        migrations.AlterField(
            model_name='site',
            name='name',
            field=models.CharField(blank=True, default='', help_text='Site name', max_length=200),
        ),
        migrations.AlterField(
            model_name='site',
            name='restart',
            field=models.TimeField(default=datetime.time(0, 0), help_text='Daily restart time in UTC'),
        ),
        migrations.AlterField(
            model_name='site',
            name='timezone',
            field=models.IntegerField(help_text='Offset from UTC in hours', validators=[django.core.validators.MinValueValidator(-12), django.core.validators.MaxValueValidator(14)]),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='active',
            field=models.BooleanField(default=True, help_text='Whether the telescope is active and able to accept observations'),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='code',
            field=models.CharField(help_text='Telescope code', max_length=200),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='enclosure',
            field=models.ForeignKey(help_text='Enclosure which contains this telescope', on_delete=django.db.models.deletion.CASCADE, to='hardware.Enclosure'),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='ha_limit_neg',
            field=models.FloatField(help_text='Negative hour-angle limit in hours'),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='ha_limit_pos',
            field=models.FloatField(help_text='Positive hour-angle limit in hours'),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='horizon',
            field=models.FloatField(help_text='Minimum distance from horizion telescope can point without field of view being obscured, in degrees'),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='lat',
            field=models.FloatField(help_text='Telescope latitude in decimal degrees'),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='long',
            field=models.FloatField(help_text='Telescope longitude in decimal degrees'),
        ),
        migrations.AlterField(
            model_name='telescope',
            name='name',
            field=models.CharField(blank=True, default='', help_text='Telescome name', max_length=200),
        ),
    ]
