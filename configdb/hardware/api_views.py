from rest_framework import viewsets, filters
import django_filters
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.schemas.openapi import AutoSchema

from configdb.hardware import serializers
from .models import (
    Site, Enclosure, Telescope, OpticalElementGroup, Instrument, Camera, OpticalElement,
    CameraType, GenericMode, GenericModeGroup, InstrumentType
)


class CustomViewSchema(AutoSchema):
    """
    Class to generate OpenAPI schema from views

    Users of this class may specify custom filter annotations to override those
    generated by Django Rest Framework.
    """
    def __init__(self, custom_filter_annotations=None, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.custom_filter_annotations = custom_filter_annotations

    def get_filter_parameters(self, path, method):
        parameters = super().get_filter_parameters(path, method)
        # If a set of additional filter annotations were provided, override what Django has generated
        if self.custom_filter_annotations is not None:
            for annotation in self.custom_filter_annotations:
                for parameter in parameters:
                    if parameter['name'] == annotation['name']:
                        parameter['description'] = annotation['description']
                        # if a type has been specified, add that to the OpenAPI schema. String is the default
                        if annotation.get('type'):
                            parameter['schema'] = {'type': annotation['type']}
        return parameters


class FilterableViewSet(viewsets.ModelViewSet):
    filter_backends = (DjangoFilterBackend,)


class SiteViewSet(FilterableViewSet):
    custom_filter_annotations = [{'name': 'name', 'description': 'Site name'},
                                 {'name': 'code', 'description': 'Site code'}]
    schema = CustomViewSchema(tags=['Sites'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = Site.objects.all().prefetch_related(
        'enclosure_set__telescope_set__instrument_set__autoguider_camera__optical_element_groups',
        'enclosure_set__telescope_set__instrument_set__autoguider_camera__optical_element_groups__optical_elements',
        'enclosure_set__telescope_set__instrument_set__science_cameras__optical_element_groups',
        'enclosure_set__telescope_set__instrument_set__science_cameras__optical_element_groups__optical_elements',
        'enclosure_set__telescope_set__instrument_set__instrument_type__mode_types',
        'enclosure_set__telescope_set__instrument_set__instrument_type__mode_types__modes',
    )
    serializer_class = serializers.SiteSerializer
    filter_fields = ('name', 'code')


class EnclosureViewSet(FilterableViewSet):
    custom_filter_annotations = [{'name': 'name', 'description': 'Enclosure name'},
                                 {'name': 'code', 'description': 'Enclosure code'},
                                 {'name': 'site', 'description': 'Unique site ID', 'type': 'integer'}]
    schema = CustomViewSchema(tags=['Enclosures'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = Enclosure.objects.all().select_related('site').prefetch_related(
        'telescope_set__instrument_set__autoguider_camera__optical_element_groups',
        'telescope_set__instrument_set__autoguider_camera__optical_element_groups__optical_elements',
        'telescope_set__instrument_set__science_cameras__optical_element_groups',
        'telescope_set__instrument_set__science_cameras__optical_element_groups__optical_elements',
        'telescope_set__instrument_set__instrument_type__mode_types',
        'telescope_set__instrument_set__instrument_type__mode_types__modes',
    )

    serializer_class = serializers.EnclosureSerializer
    filter_fields = ('name', 'code', 'site')


class TelescopeViewSet(FilterableViewSet):
    custom_filter_annotations = [{'name': 'name', 'description': 'Telescope name'},
                                 {'name': 'code', 'description': 'Telescope code'},
                                 {'name': 'lat', 'description': 'Telescope latitude in decimal degrees', 'type': 'number'},
                                 {'name': 'long', 'description': 'Telescope longitude in decimal degrees', 'type': 'number'},
                                 {'name': 'horizon', 'description': 'Minimum distance from horizion telescope can point without field of view being obscured, in degrees', 'type': 'number'},
                                 {'name': 'enclosure', 'description': 'Unique enclosure ID', 'type': 'integer'}]
    schema = CustomViewSchema(tags=['Telescopes'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = Telescope.objects.all().select_related('enclosure__site').prefetch_related(
        'instrument_set__autoguider_camera__optical_element_groups',
        'instrument_set__autoguider_camera__optical_element_groups__optical_elements',
        'instrument_set__science_cameras__optical_element_groups',
        'instrument_set__science_cameras__optical_element_groups__optical_elements',
        'instrument_set__instrument_type__mode_types',
        'instrument_set__instrument_type__mode_types__modes',
    )
    serializer_class = serializers.TelescopeSerializer
    filter_fields = ('name', 'code', 'lat', 'long', 'horizon',
                     'enclosure')


class InstrumentFilter(django_filters.rest_framework.FilterSet):
    ''' Filter class used to specify a filterable attribute in the cameratype of science camera in this instrument.
        The added attribute to filter on is juse camera_type, which maps to the camera->camera_type->name parameter.
    '''
    camera_type = django_filters.CharFilter(field_name="science_cameras__camera_type__code",
                                            label='Camera type code')
    instrument_type = django_filters.CharFilter(field_name="instrument_type__code",
                                                label='Instrument type code')
    telescope = django_filters.CharFilter(field_name="telescope__code",
                                          label='Telescope code')
    enclosure = django_filters.CharFilter(field_name="telescope__enclosure__code",
                                          label='Enclosure code')
    site = django_filters.CharFilter(field_name="telescope__enclosure__site__code",
                                     label='Site code')
    state = django_filters.CharFilter(method='state_filter', label='Instrument state')


    class Meta:
        model = Instrument
        fields = ['telescope', 'science_cameras', 'autoguider_camera', 'instrument_type',
                  'camera_type', 'site', 'telescope', 'enclosure', 'state']

    def state_filter(self, queryset, name, value):
        ''' Allows us to do queries like ?state=MANUAL instead of ?state=10 '''
        for state in Instrument.STATE_CHOICES:
            if value.upper() == state[1]:
                return queryset.filter(state=state[0])
        return queryset


class InstrumentViewSet(FilterableViewSet):
    custom_filter_annotations=[{'name': 'science_cameras', 'description': 'Set of science camera codes on the instrument',
                                'type': 'Array of strings'},
                               {'name': 'autoguider_camera', 'description': 'Autoguider code for the autoguider camera on the instrument'}]
    schema = CustomViewSchema(tags=['Instruments'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = Instrument.objects.all().select_related('telescope__enclosure__site', 'instrument_type').prefetch_related(
        'autoguider_camera__optical_element_groups',
        'autoguider_camera__optical_element_groups__optical_elements',
        'science_cameras__optical_element_groups',
        'science_cameras__optical_element_groups__optical_elements',
        'instrument_type__mode_types',
        'instrument_type__mode_types__modes'
    ).distinct()
    serializer_class = serializers.InstrumentSerializer
    filter_backends = (DjangoFilterBackend, filters.OrderingFilter,)
    filter_class = InstrumentFilter


class CameraTypeViewSet(FilterableViewSet):
    custom_filter_annotations=[{'name': 'name', 'description': 'Camera type name'},
                               {'name': 'pscale', 'description': 'Pixel scale in arcseconds/pixel', 'type': 'number'}]
    schema = CustomViewSchema(tags=['Camera Types'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = CameraType.objects.all()
    serializer_class = serializers.CameraTypeSerializer
    filter_fields = ('name', 'pscale')


class InstrumentTypeViewSet(FilterableViewSet):
    custom_filter_annotations=[{'name': 'name', 'description': 'Camera type name'},
                               {'name': 'code', 'description': 'Instrument type code'},
                               {'name': 'instrument_category', 'description': 'Instrument category name'}]
    schema = CustomViewSchema(tags=['Instrument Types'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = InstrumentType.objects.all()
    serializer_class = serializers.InstrumentTypeSerializer
    filter_fields = ('name', 'code', 'instrument_category')


class CameraViewSet(FilterableViewSet):
    custom_filter_annotations=[{'name': 'code', 'description': 'Camera code'},
                               {'name': 'camera_type', 'description': 'Camera type unique ID', 'type': 'integer'}]
    schema = CustomViewSchema(tags=['Cameras'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = Camera.objects.all().select_related('camera_type').prefetch_related(
        'optical_element_groups',
        'optical_element_groups__optical_elements'
    )
    serializer_class = serializers.CameraSerializer
    filter_fields = ('code', 'camera_type')


class OpticalElementGroupViewSet(FilterableViewSet):
    custom_filter_annotations=[{'name': 'name', 'description': 'Optical element group name'},
                               {'name': 'type', 'description': 'Optical element group type'},
                               {'name': 'optical_elements', 'description': 'List of optical elements in optical element group',
                                'type': 'Array of objects'}]
    schema = CustomViewSchema(tags=['Optical Element Groups'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = OpticalElementGroup.objects.all().prefetch_related('optical_elements').distinct()
    serializer_class = serializers.OpticalElementGroupSerializer
    filter_fields = ('name', 'type', 'optical_elements')


class OpticalElementViewSet(FilterableViewSet):
    custom_filter_annotations=[{'name': 'id', 'description': 'Optical element unique ID', 'type': 'integer'},
                               {'name': 'name', 'description': 'Optical element name'},
                               {'name': 'code', 'description': 'Optical element code'},
                               {'name': 'schedulable', 'description': 'Whether optical element is schedulable', 'type': 'boolean'}]
    schema = CustomViewSchema(tags=['Optical Elements'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = OpticalElement.objects.all()
    serializer_class = serializers.OpticalElementSerializer
    filter_fields = ('id', 'name', 'code', 'schedulable')


class GenericModeGroupViewSet(FilterableViewSet):
    schema = CustomViewSchema(tags=['Generic Mode Groups'])
    queryset = GenericModeGroup.objects.all()
    serializer_class = serializers.GenericModeGroupSerializer


class GenericModeViewSet(FilterableViewSet):
    custom_filter_annotations= [{'name': 'name', 'description': 'Optical element name'},
                                {'name': 'code', 'description': 'Optical element code'},
                                {'name': 'schedulable', 'description': 'Whether generic mode is schedulable', 'type': 'boolean'}]
    schema = CustomViewSchema(tags=['Generic Modes'],
                              custom_filter_annotations=custom_filter_annotations)
    queryset = GenericMode.objects.all()
    serializer_class = serializers.GenericModeSerializer
    filter_fields = ('name', 'code', 'schedulable')
